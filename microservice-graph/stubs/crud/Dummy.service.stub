import { Injectable, NotFoundException } from '@nestjs/common';
import { UpdateDummyInput } from './inputs/update-Dummy.input';
import {
  ClientProxy,
  ClientProxyFactory,
  Transport,
} from '@nestjs/microservices';
import { Dummy } from './dummy.interface';
import { GetDummyInput } from './inputs/get-dummy.input';
import { PaginationOptions } from '../../common/pagination/pagination-options.args';
import { DeleteDummyInput } from './inputs/delete-dummy.input';
import { SuccessPayload } from '../../common/helpers/payloads/success.payload';
import { CreateDummyInput } from './inputs/create-dummy.input';

@Injectable()
export class DummyService {
  private client: ClientProxy;
  constructor() {
    this.client = ClientProxyFactory.create({
      transport: Transport.TCP,
      options: {
        host: '127.0.0.1',
        port: 8789,
      },
    });
  }
  async dummy(getDummyInput: GetDummyInput): Promise<Dummy> {
    const dummy: Dummy = await this.client
      .send<Dummy, GetDummyInput>('dummy', getDummyInput)
      .toPromise();
    if (!dummy) throw new NotFoundException();
    return dummy;
  }

  dummys(): Promise<Dummy[]> {
    return this.client
      .send<Dummy[], PaginationOptions>('dummys', {})
      .toPromise();
  }

  async createDummy(dummyDto: CreateDummyInput): Promise<Dummy> {
    return this.client
      .send<Dummy, CreateDummyInput>('createDummy', dummyDto)
      .toPromise();
  }

  async updateDummy(
    updateDummyInput: UpdateDummyInput,
  ): Promise<Dummy> {
    const result = await this.client
      .send<Dummy, UpdateDummyInput>(
        'updateDummy',
        updateDummyInput,
      )
      .toPromise();
    if (!result) throw new NotFoundException();
    return result;
  }

  async deleteDummy(
    deleteDummyInput: DeleteDummyInput,
  ): Promise<SuccessPayload> {
    const result: boolean = await this.client
      .send<boolean, DeleteDummyInput>('deleteDummy', deleteDummyInput)
      .toPromise();
    if (!result) throw new NotFoundException();
    return {
      message: 'success',
    };
  }


}
