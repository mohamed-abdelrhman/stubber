import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { DummyService } from './dummy.service';
import { GetDummyInput } from './inputs/get-dummy.input';
import { DeleteDummyInput } from './inputs/delete-dummy.input';
import { UpdateDummyInput } from './inputs/update-Dummy.input';
import { SuccessPayload } from '../../common/helpers/payloads/success.payload';
import { DummyType } from './types/dummy.type';
import { CreateDummyInput } from './inputs/create-dummy.input';
import { Dummy } from './dummy.interface';
@Resolver((of) => DummyType)
export class DummyResolver {
  constructor(private dummyService: DummyService) {}

  @Query((returns) => DummyType)
  dummy(
    @Args('getDummyInput') getDummyInput: GetDummyInput,
  ): Promise<Dummy> {
    return this.dummyService.dummy(getDummyInput);
  }

  @Query((returns) => [DummyType])
  dummys(): Promise<Dummy[]> {
    return this.dummyService.dummys();
  }

  @Mutation(() => DummyType)
  createDummy(
    @Args('createDummyInput') createDummyInput: CreateDummyInput,
  ): Promise<Dummy> {
    return this.dummyService.createDummy(createDummyInput);
  }

  @Mutation((returns) => DummyType)
  updateDummy(
    @Args('updateDummyInput') updateDummyInput: UpdateDummyInput,
  ): Promise<Dummy> {
    return this.dummyService.updateDummy(updateDummyInput);
  }

  @Mutation(() => SuccessPayload)
  deleteDummy(
    @Args('deleteDummyInput') deleteDummyInput: DeleteDummyInput,
  ): Promise<SuccessPayload> {
    return this.dummyService.deleteDummy(deleteDummyInput);
  }
}
