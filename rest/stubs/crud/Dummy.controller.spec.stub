import { Test } from '@nestjs/testing';
import { Dummy } from './entities/fileName.entity';
import { DummyController } from './fileName.controller';
import { DummyModule } from './fileName.module';
import { INestApplication, NotFoundException } from '@nestjs/common';
import { getConnection } from 'typeorm';
import { UpdateDummyDto } from './dto/update-fileName.dto';
import { TypeOrmModule } from '@nestjs/typeorm';
import { DummyService } from './fileName.service';
import { DummyRepository } from './fileName.repository';

describe('DummyModuleIntegration', () => {
  let app: INestApplication;
  let controller;
  let connection;

  beforeAll(async () => {
    const module = await Test.createTestingModule({
      imports: [
        DummyModule,
        // PostgresDatabaseProviderModule,
        TypeOrmModule.forRoot({
          type: 'postgres',
          host: 'localhost',
          port: 5432,
          username: 'postgres',
          password: '123456',
          database: 'e2e_test',
          entities: [Dummy],
          synchronize: true,
        }),
      ],
      providers: [DummyRepository, DummyService],
      controllers: [DummyController],
    }).compile();
    app = module.createNestApplication();
    await app.init();
    controller = module.get<DummyController>(DummyController);
    connection = getConnection();
  });

  afterEach(async () => {
    await connection.createQueryBuilder().delete().from(Dummy).execute();
  });
  afterAll(async () => {
    await app.close();
  });

  describe('create dummy', () => {
    it('should create dummy', async () => {
      const savedDummy = await controller.createDummy();
      const dummy = await connection
        .createQueryBuilder()
        .select('dummy')
        .from(Dummy, 'dummy')
        .getOne();
      expect(savedDummy).toEqual(dummy);
    });
  });
  describe('update dummy', () => {
    it('should update dummy', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();

      const updateDto: UpdateDummyDto = {};
      const updatedDummy = await controller.updateDummy(
        dummyInsert.raw[0].dummy_id,
        Object.create(updateDto), //pass by value
      );
      expect(updatedDummy.dummy_id).toEqual(dummyInsert.raw[0].dummy_id);
    });
  });
  describe('get dummy', () => {
    it('should get dummy by id', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();
      const dummy_id = dummyInsert.raw[0].dummy_id;
      const dummy = await controller.dummy(dummy_id);
      expect(dummy.dummy_id).toEqual(dummy_id);
    });
  });
  describe('delete dummy', () => {
    it('should delete by id', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();
      const dummy_id = dummyInsert.raw[0].dummy_id;
      await expect(controller.deleteDummy(dummy_id)).resolves.not.toThrow();
      await expect(controller.deleteDummy(dummy_id)).rejects.toThrow(
        NotFoundException,
      );
    });
  });
});
