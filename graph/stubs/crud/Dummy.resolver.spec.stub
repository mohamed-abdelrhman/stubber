import { Test } from '@nestjs/testing';
import { Dummy } from './entities/fileName.entity';
import { DummyModule } from './fileName.module';
import { INestApplication, NotFoundException } from '@nestjs/common';
// import { PostgresDatabaseProviderModule } from '../../providers/database/postgres/provider.module';
import { getConnection } from 'typeorm';
import { TypeOrmModule } from '@nestjs/typeorm';
import { DummyResolver } from './fileName.resolver';
import { DummyService } from './fileName.service';
import { DummyRepository } from './fileName.repository';
import { UpdateDummyInput } from './inputs/update-fileName.input';
import { GetDummyInput } from './inputs/get-fileName.input';
import { DeleteDummyInput } from './inputs/delete-fileName.input';

describe('DummyModuleIntegration', () => {
  let app: INestApplication;
  let resolver;
  let connection;

  beforeAll(async () => {
    const module = await Test.createTestingModule({
      imports: [
        DummyModule,
        // PostgresDatabaseProviderModule,
        TypeOrmModule.forRoot({
          type: 'postgres',
          host: 'localhost',
          port: 5432,
          username: 'postgres',
          password: '123456',
          database: 'e2e_test',
          entities: [Dummy],
          synchronize: true,
        }),
      ],
      providers: [DummyResolver, DummyService, DummyRepository],
    }).compile();
    app = module.createNestApplication();
    await app.init();
    resolver = module.get<DummyResolver>(DummyResolver);
    connection = getConnection();
  });

  afterEach(async () => {
    await connection.createQueryBuilder().delete().from(Dummy).execute();
  });
  afterAll(async () => {
    await app.close();
  });

  describe('dummy resolver', () => {
    it('should be defined', async () => {
      expect(resolver).toBeDefined();
    });
  });

  describe('create dummy', () => {
    it('should create dummy', async () => {
      const savedDummy = await resolver.createDummy();
      const dummy = await connection
        .createQueryBuilder()
        .select('dummy')
        .from(Dummy, 'dummy')
        .getOne();
      expect(savedDummy).toEqual(dummy);
    });
  });
  describe('update dummy', () => {
    it('should update dummy', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();

      const updateInput: UpdateDummyInput = {
        dummy_id: dummyInsert.raw[0].dummy_id,
      };
      const updatedDummy = await resolver.updateDummy(
        Object.create(updateInput), //pass by value
      );
      expect(updatedDummy.dummy_id).toEqual(updateInput.dummy_id);
    });
  });
  describe('get dummy', () => {
    it('should get dummy by id', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();
      const dummy_id = dummyInsert.raw[0].dummy_id;
      const getDummy: GetDummyInput = {
        dummy_id: dummyInsert.raw[0].dummy_id,
      };
      const dummy = await resolver.dummy(getDummy);
      expect(dummy.dummy_id).toEqual(dummy_id);
    });
  });
  describe('delete dummy', () => {
    it('should delete by id', async () => {
      const dummyInsert = await connection
        .createQueryBuilder()
        .insert()
        .into(Dummy)
        .values([{}])
        .execute();
      const dummy_id = dummyInsert.raw[0].dummy_id;
      const deleteDummy: DeleteDummyInput = {
        dummy_id: dummyInsert.raw[0].dummy_id,
      };
      await expect(resolver.deleteDummy(deleteDummy)).resolves.not.toThrow();
      await expect(resolver.deleteDummy(deleteDummy)).rejects.toThrow(
        NotFoundException,
      );
    });
  });
});
